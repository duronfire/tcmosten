Function description of comm interface outlook/django
1. in order to keep calendar in outlook as main work space for clinic, patient info must be labeled and synchronized with django
2. non-patient info must not be labeled and synchronized
3. category must be auto set to a pre-defined i.e. "new patient/old new patient etc." as appointment was add.
4. by changing of appointment, date time and category should be synchronized. 
5. Changing patient name in existing appointment is not allowed! Suggested Work around is delete and recreate appointment by mistake.

Specifications:

1. Label for identifying Patient-info is defined: "P:" or "p:" in subject field in outlook by adding new appointment
2. By changing/deleting of appointment, PID will be used to identify if it's a patient appointment. PID = null for non-patient appointment.
3. PID is a userdefined property in Outlook and is primary key in SQL Table "Sitzung"
4. UID is a temporay index for returned ordered object from query. UID enables selecting returened ordered object by index.
5. Using uniform UserForm Select/find/new as input for adding appointment for all old and new patients.
6. Fault by adding/changing/deleting must be protocolled on local disk 
7. Patient Contact must be sychronized with SQL Table "Patient". Difference must be protocolled on location same as Fault-Protocol.
8. Patient appointment must be sychronized with SQL Table "Sitzung". Difference must be protocolled on location same as Fault-Protocol.
9. Lock Outlook by synchronization







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







Synchronized Workflow Ol:

||x|| Catch Point Http Error


Add:

1.       Ol(State, N,S,E,G)-->Post-->||1|| SQL(State, N,S,E,G) --> Query (N)--> Response with Ns,Gs --> ||2||  Ol UserForm Select/find/new -->

    1)      If select old --> Post (with “select” and UID)  --> SQL (PID ADD in Table “Sitzung”) --> Response with PID and Stamp “Create” -->||2||  Ol (PID ADD) --> MsgBox add successfully

    2)      If add new --> Post (with “new” and N,S,E,G)  --> SQL (ADD New User in Table User) --> SQL (PID ADD in Table “Sitzung”) --> Response with PID and Stamp “Create” -->||2||  Ol (PID ADD) --> MsgBox new add successfully

    3)      If find old --> Use 1.

 

Change:

1.       Ol(PID,N,S,E,G) --> Post -->||1|| SQL(PID,N,S,E,G) --> Query (PID) -->

2.       Check match =[0,1,>1]

    (1)        If = 0 --> Synchro Process define

    (2)        If = 1 --> Chain Query (N) --> check match = [0, 1]

        1)      If = 0 --> Throw N change not allowed and reset N, N change only per add old/new

        2)      If =1 --> SQL change S,E --> Response with “Change accepted” and Stamp “Change” -->||2||  Ol  MsgBox change accepted

 

Delete:

1.  Ol(PID,N,S,E,G) --> Post -->||1|| SQL(PID,N,S,E,G) --> Query (PID) -->

1.       Check match =[0,1,>1]

    (1)        If = 0 --> Synchro Process define

    (2)        If = 1 --> Chain Query (S,E) --> check match = [0, 1]

        1)      If = 0 --> Synchro Process define

        2)      If =1 --> SQL del PID --> Response with “delete accepted” and Stamp “Delete” -->||2||  Ol  MsgBox delete accepted

-----------------------------------------------------------------------------------------------------------------------------------------------------






Asynchronized Workflow Appointment Item:

Add:
1. Select Calendar date time and write Label "p:" with complete name or part of name --> UserForm UserForm Select/find/new --> 
    1). If select old name in search field -> create meeting item with selected name and time --> add and set Sync-Label to false --> add and set Patient-Label --> save  
    2). If add new --> If old patient found With Confirmation MsgBox "create new although old list is not empty", vbYesNo, "Create New Patient" --> create user --> create meetingitem with name and time --> add and set Sync-Label to false --> add and set Patient-Label --> save  
    3). If change name in listbox and find again --> 1).    

change:
1. Making changes --> Check Patient-Label, Only if with Patient-Label -->  read properties (Subject, datetime participate etc.) by write event --> 
    1). If Name changed in Subject or participate --> MsgBox "change name not allowed, changes will not be saved. Delete the appointment by wrong name instead". 
    2). If Only Date Time changes --> Save and Reset Sync-Label to false  

Logically Delete (physically move to):
1. Delete (move to) appointment --> Check Patient-Label, Only if with Patient-Label --> catch appointment entryid by event beforemoveto --> set item state to ondelete --> after sync set item state to deleted
 
Asynchronized Workflow Kontakt Item:
Add:
1. User create new patient and choose yes for confirming new patient. Patient become patient_label,last_sync, start_sync, sync_state, sync_run, item_state Labels.

change:
1. If patient_label is not nothing and if syncrun is "idle" and if Datediff(last_sync, now) <1 then, item state ="changed" 
2. If sync_run is run and start_sync started more than xxx seconds before --> timeout error for sync --> write item state changed_aft_error --> write sync_run  
Logically Delete (physically move to):
1. Delete (move to) appointment --> Check Patient-Label, Only if with Patient-Label --> catch appointment entryid by event beforemoveto --> set delete-Label to true  
 


Synchronization workflow Ol-Django:
1. Client send GET local Ol-Info to Django (per Ol/Browser) --> Django send GET Sync-Request to local python Http-Server --> local python Http-Server call python sychronization function --> retrieve all Ol-Items with ".restrict(Sync-Label = false)" --> local Http-Server POST retrieved info to Django-Server --> Django synchronize SQL Database --> send GET "OK" to local Http-Server --> call python function to set Sync-Label to True on all retrieved items --> send GET "Commit changes" 
2. Admin-Client send GET ALL Ol-Info to Django (per Browser) --> Django send GET Sync-Request to all local python Http-Servers --> local python Http-Server call python synchronization function --> retrieve all Ol-Items with ".restrict(Sync-Label = false)" --> local Http-Servers POST retrieved info to Django-Server --> Django synchronize SQL Database --> send GET "OK" to local Http-Server --> call python function to set Sync-Label to True on all retrieved items --> send GET "Commit changes" 
!!!!protocol synchronization in every step!!!!

Sync State:
 'Ol: wait,gotsignal,restricted,gotform,gotsqlupdated,saved; Django on sync protocol table ordered by sync start time, status:gotsignal,gotrestricted,gotformrequest,gotpost,sqlupdated,done

Sync run:
"idle", "run", "error"

Item state:
"created", "changed", "changed_aft_error", "onserver"

local                                                               Server
                --> GET Request to sync link on Server -->
                <-- Response "Sync proc start" <--

                <-- GET Request to sync link on local python HTTPServer <--
Run Restrict    --> Response after restricted -->

                --> Request form -->
                <-- Response form <--
                --> POST Request form -->                       SQL Update
Label,Save      <-- Response  SQL Updated <--
                --> GET Request final-->                        stamp last sync
                          
Label_Patient: "created""new","old","newold"

Default Value of oltext, olyesno, oldatetime: "", #01/01/4501#, False


