django version 3.1
outlook 2013

Function description of comm interface outlook/django
1. in order to keep calendar in outlook as main work space for clinic, patient info must be labeled and synchronized with django
2. non-patient info must not be labeled and synchronized
3. category must be auto set to a pre-defined i.e. "new patient/old new patient etc." as appointment was add.
4. by changing of appointment, date time and category should be synchronized. 
5. Changing patient name in existing appointment is not allowed! Suggested Work around is delete and recreate appointment by mistake.

Specifications:

1. Label for identifying Patient-info is defined: "P:" or "p:" in subject field in outlook by adding new appointment
2. By changing/deleting of appointment, PID will be used to identify if it's a patient appointment. PID = null for non-patient appointment.
3. PID is a userdefined property in Outlook and is primary key in SQL Table "Sitzung"
4. UID is a temporay index for returned ordered object from query. UID enables selecting returened ordered object by index.
5. Using uniform UserForm Select/find/new as input for adding appointment for all old and new patients.
6. Fault by adding/changing/deleting must be protocolled on local disk 
7. Patient Contact must be sychronized with SQL Table "Patient". Difference must be protocolled on location same as Fault-Protocol.
8. Patient appointment must be sychronized with SQL Table "Sitzung". Difference must be protocolled on location same as Fault-Protocol.
9. Lock Outlook by synchronization







-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







Synchronized Workflow Ol:

||x|| Catch Point Http Error


Add:

1.       Ol(State, N,S,E,G)-->Post-->||1|| SQL(State, N,S,E,G) --> Query (N)--> Response with Ns,Gs --> ||2||  Ol UserForm Select/find/new -->

    1)      If select old --> Post (with “select” and UID)  --> SQL (PID ADD in Table “Sitzung”) --> Response with PID and Stamp “Create” -->||2||  Ol (PID ADD) --> MsgBox add successfully

    2)      If add new --> Post (with “new” and N,S,E,G)  --> SQL (ADD New User in Table User) --> SQL (PID ADD in Table “Sitzung”) --> Response with PID and Stamp “Create” -->||2||  Ol (PID ADD) --> MsgBox new add successfully

    3)      If find old --> Use 1.

 

Change:

1.       Ol(PID,N,S,E,G) --> Post -->||1|| SQL(PID,N,S,E,G) --> Query (PID) -->

2.       Check match =[0,1,>1]

    (1)        If = 0 --> Synchro Process define

    (2)        If = 1 --> Chain Query (N) --> check match = [0, 1]

        1)      If = 0 --> Throw N change not allowed and reset N, N change only per add old/new

        2)      If =1 --> SQL change S,E --> Response with “Change accepted” and Stamp “Change” -->||2||  Ol  MsgBox change accepted

 

Delete:

1.  Ol(PID,N,S,E,G) --> Post -->||1|| SQL(PID,N,S,E,G) --> Query (PID) -->

1.       Check match =[0,1,>1]

    (1)        If = 0 --> Synchro Process define

    (2)        If = 1 --> Chain Query (S,E) --> check match = [0, 1]

        1)      If = 0 --> Synchro Process define

        2)      If =1 --> SQL del PID --> Response with “delete accepted” and Stamp “Delete” -->||2||  Ol  MsgBox delete accepted

-----------------------------------------------------------------------------------------------------------------------------------------------------






Asynchronized Workflow Appointment Item:

Add:
1. Select Calendar date time and write Label "p:" with complete name or part of name --> UserForm UserForm Select/find/new --> 
    1). If select old name in search field -> create meeting item with selected name and time --> add and set Sync-Label to false --> add and set Patient-Label --> save  
    2). If add new --> If old patient found With Confirmation MsgBox "create new although old list is not empty", vbYesNo, "Create New Patient" --> create user --> create meetingitem with name and time --> add and set Sync-Label to false --> add and set Patient-Label --> save  
    3). If change name in listbox and find again --> 1).    

change:
1. Making changes --> Check Patient-Label, Only if with Patient-Label -->  read properties (Subject, datetime participate etc.) by write event --> 
    1). If Name changed in Subject or participate --> MsgBox "change name not allowed, changes will not be saved. Delete the appointment by wrong name instead". 
    2). If Only Date Time changes --> Save and Reset Sync-Label to false  

Logically Delete (physically move to):
1. Delete (move to) appointment --> Check Patient-Label, Only if with Patient-Label --> catch appointment entryid by event beforemoveto --> set item state to ondelete --> after sync set item state to deleted
 
Asynchronized Workflow Kontakt Item:
Add:
1. User create new patient and choose yes for confirming new patient. Patient become patient_label,last_sync, start_sync, sync_state, sync_run, item_state Labels.

change:
1. If patient_label is not nothing and if syncrun is "idle" and if Datediff(last_sync, now) <1 then, item state ="changed" 
2. If sync_run is run and start_sync started more than xxx seconds before --> timeout error for sync --> write item state changed_aft_error --> write sync_run  
Logically Delete (physically move to):
1. Delete (move to) appointment --> Check Patient-Label, Only if with Patient-Label --> catch appointment entryid by event beforemoveto --> set delete-Label to true  
 


Synchronization workflow Ol-Django:
1. Client send GET local Ol-Info to Django (per Ol/Browser) --> Django send GET Sync-Request to local python Http-Server --> local python Http-Server call python sychronization function --> retrieve all Ol-Items with ".restrict(Sync-Label = false)" --> local Http-Server POST retrieved info to Django-Server --> Django synchronize SQL Database --> send GET "OK" to local Http-Server --> call python function to set Sync-Label to True on all retrieved items --> send GET "Commit changes" 
2. Admin-Client send GET ALL Ol-Info to Django (per Browser) --> Django send GET Sync-Request to all local python Http-Servers --> local python Http-Server call python synchronization function --> retrieve all Ol-Items with ".restrict(Sync-Label = false)" --> local Http-Servers POST retrieved info to Django-Server --> Django synchronize SQL Database --> send GET "OK" to local Http-Server --> call python function to set Sync-Label to True on all retrieved items --> send GET "Commit changes" 
!!!!protocol synchronization in every step!!!!

Sync State:
 'Ol: wait,gotsignal,restricted,gotform,gotsqlupdated,saved; Django on sync protocol table ordered by sync start time, status:gotsignal,gotrestricted,gotformrequest,gotpost,sqlupdated,done

Sync run:
"idle", "run", "error"

Item state:
"created", "changed", "changed_aft_error", "onserver"

local                                                               Server
                --> GET Request to sync link on Server -->
                <-- Response "Sync proc start" <--

                <-- GET Request to sync link on local python HTTPServer <--
Run Restrict    --> Response after restricted -->

                --> Request form -->
                <-- Response form <--
                --> POST Request form -->                       SQL Update
Label,Save      <-- Response  SQL Updated <--
                --> GET Request final-->                        stamp last sync
                          
Label_Patient: "created""new","old","oldnew"

Default Value of oltext, olyesno, oldatetime: "", #01/01/4501#, False
Dim As String default to ""
Dim As Object default to nothing
Dim As arr() default UBound(arr) to -1

all class variable must be in subprocedure initialized and reseted before re-use. Dynamic array must be earased use "Erase function"
'item.save in subprocedur of item_change itself will not activate event item_change






VBA Bug:
if userform call a function "example" and this function "example" results a event. userform stops after event is done and will not continue running code after function "example".
in one function only 1 event can be triggered. But which one will be triggered is not exact clear! 
Typically only the event triggered by last trigger-function (i.e. Save is last function, it will trigger CT_Add) will be finished, at the same time the event which was called before (Save Ap called AP_Add event) stops. But if CT Save is not last function then, the first triggered event (AP_Add) will finished and CT_ADD event will not be called!!!!
If Item.Save is in a loop, whether event will be called depends on code. Behavier is uncertain! Known behavier:
    1. if there is no msgbox called after save, all save will be call curiously in one shot one after another at last of code execution! The run order is not the same as defined. It's a huge bug!!!!!!!
    2. to overcome this bug, simplely add a msgbox at the end of your sub, which called item.save. see sync_proc.run_sync logger.log "warning", "Outlook wurde soeben erfolgreich sychronisiert!"
VBA raises no error if no permission to read or write use OPEN xxx as xxx

Outlook PropertyAccesor:
"Gender", "urn:schemas:contacts:gender" 'Bug: if use "http://schemas.microsoft.com/mapi/proptag/0x3A4D0002, runtime error with getproperty, but works with setproperty"

By Using Propertyaccessor, aLL date proprty will be set in cureent system region time and retrieved in UTC Time. For example propertyassessor.setproperty "birthday", #01.10.2020 12:00 AM# in german time zone, getproperty return UTC date #30.09.2020 11:00 PM#
PropertyAccessor returns "Null" Vartype=1 by empty birthday and item.Birthday returns value 01.01.4501 by empty birthday!!!Cstr(Null) will return error!!!!
PropertyAccessor returns #30.09.2020 11:00 PM# (UTC Time) by existing birthday and item.Birthday returns value #01.10.2020# by empty birthday (local region time for i.e. Germany) without hh:mm:ss. Bo set birthday by propertyaccessor.setproperty  the hh:mm:ss will be ignored 

PropertyAccessor returns raw binary value of entryid and item.EntryID returns str value of entryid!!!
PropertyAccessor to setproperty with date type (Ptyptime 0x0040). it must use #01.01.2020 2:00 PM# or DateValue("01.01.2020 2:00 PM"). Using "01.01.2020 2:00 PM" case type error! 
for example : Dim dt As Data and dt="01/10/2020 2:00 PM" will return a string with date in region format, but not date in variante format!!!

empty String property returns ""  by both propertyaccessor or attribute 

Dictionary stores only reference of object, if object changes, the object in a dictionary changes too!

datetime has a variable length!!!!!!!
datetime.datetime() always only show YYYY-MM-DD HH:MM, if seconds is 0. If seconds and miliseconds are not 0, it will show full datetime.datetime(yyyy,mm,dd,hh,mm,ss,mmmmm)


Application_Quit Event:
if Quit Event is called, all modules are already unloaded and also the global variables and objects. Then the event code will be invoked. So you can't write useful event code in this event.  









VBA ERROR HANDLING:
On Error resume next disable all error after the line where error orcurs and go on until end sub
On Error GoTo 0 disable the effect of "on error resume next" and error after that will cause exception 
On Error GoTo -1 disable all exception which was throwed, not tested

URL Spec:
RFC3986 definition:Url can only include a-zA-Z and 0-9 and -_.~ signs 
! * ' ( ) ; : @ & = + $ , / ? # [ ] are special characters with syntax meaning





Backup:
method 1: backup database folder ("/data" folder), only after shutdown Server
method 2: filesystem snapshot
method 3: pg_dump





            'check unpermitted changes
            unpermitted_change_p = True
            tp_change = False
            unpermitted_change_tp = True
            
            
            Set rps = item.Recipients
            If item.Recipients.Count = 3 Then
                'check item 2
                ct_item2_plabel = ""
                If rps.item(2).Resolved Then
                    Set ct_item2 = rps.item(2).AddressEntry
                    If Not ct_item2 Is Nothing Then
                        Set ct_item2 = ct_item2.GetContact
                        ct_item2_plabel = ct_item2.UserProperties.Find(isys_interface.UPROP_PLABEL).Value
                    End If
                End If
                'check therapist
                If rps.item(3).Resolved Then
                    Set ct_item3 = rps.item(3).AddressEntry
                    If Not ct_item3 Is Nothing Then
                        Set ct_item3 = ct_item3.GetContact
                        
                        If ct_item2_plabel = "patient" And ct_item3.UserProperties.Find(isys_interface.UPROP_PLABEL).Value = "patient" Then ' item 2 is patient
                            If ct_item2.EntryID = item.UserProperties.Find(isys_interface.UPROP_PEID).Value Then
                                unpermitted_change_p = False
                                If ct_item3.UserProperties.Find(isys_interface.UPROP_STAFFLABEL).Value = "therapist" Then
                                    If ct_item3.UserProperties.Find(isys_interface.UPROP_STAFFPID).Value <> item.UserProperties.Find(isys_interface.UPROP_STAFFPID).Value Then
                                        tp_change = True
                                        unpermitted_change_tp = False
                                        MsgBox "Änderung des therapists ist gespeichert!" 'user confirm change
                                    Else
                                        unpermitted_change_tp = False
                                    End If
                                End If
                                
                            ElseIf ct_item3.EntryID = item.UserProperties.Find(isys_interface.UPROP_PEID).Value Then
                                unpermitted_change_p = False
                                If ct_item2.UserProperties.Find(isys_interface.UPROP_STAFFLABEL).Value = "therapist" Then
                                    If ct_item2.UserProperties.Find(isys_interface.UPROP_STAFFPID).Value <> item.UserProperties.Find(isys_interface.UPROP_STAFFPID).Value Then
                                        tp_change = True
                                        unpermitted_change_tp = False
                                        MsgBox "Änderung des therapists ist gespeichert!" 'user confirm change
                                    Else
                                        unpermitted_change_tp = False
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If

            If unpermitted_change_tp Or unpermitted_change_p Then
               If unpermitted_change_tp Then
                   MsgBox "Geänderter therapist wurde nicht erkannt! Eingabe des geänderten therapists ist nicht vollständig or falsch!" & vbNewLine & "Änderung wird nicht gespeichert!", vbExclamation
               End If
               If unpermitted_change_p Then
                   MsgBox "Ändern des Patienten in der bestehenden Sitzung nicht gestattet!" & vbNewLine & "Bei Bedarf erstellen Sie neue Sitzung für diesen Patienten" & vbNewLine & "und ggf. die alte Sitzung über Kategorie als Absagen markieren" & vbNewLine & "Änderung wird nicht gespeichert!", vbExclamation
               End If
               rollback_ap_changes item
               SAVE_LABEL = True
            End If